
var pad = require('pad'),
	Argument = require('./argument.js'),
	help = require('./help');

module.exports = Command;

function Command (name, programLabel) {

	this.programLabel = programLabel;
	this.name = name;
	this.args = [];
	this.options = [];
	this.description = '';
	this.act = function () {};

};

Command.prototype.desc = function(desc) {
	
	this.description = desc;

	return this;

};

Command.prototype.argument = function (arg, description, def) {

	this.args.push(new Argument(arg, description, def));

	return this;

};

Command.prototype.option = function (opt, description, required) {

	this.options.push({
		opt: opt,
		description: description || '',
		required: required || false
	});

	return this;

};

Command.prototype.action = function (action) {

	this.act = action;

	return this;

};

Command.prototype.generateRegex = function () {

	var regex = {
			regex: new RegExp(),
			regexHead: new RegExp(),
			keys: [],
			defaults: {}
		},
		parts = ['(?:' + this.name + ')'];
		partsHead = ['(?:' + this.name + ')'];

	this.args.forEach(function (arg) {

		var key = {},
			result = [];

		if (arg.toString().match(/<([^>]+)>/)) {

			result = /<([^>?]+)(\?)?>/.exec(arg.toString());

			key.name = result[1];
			key.optional = result[2] === '?';
			regex.keys.push(key);

			if (arg.def !== undefined) {
				regex.defaults[arg.name] = arg.def;
			}

			parts.push(((key.optional === true) ? '?' : '') + '(?:([^\\s]+))' + ((key.optional === true) ? '?' : ''));

		} else {

			parts.push('(?:' + arg.toString() + ')');
			partsHead.push('(?:' + arg.toString() + ')');

		}


	});

	regex.regex = new RegExp('^' + parts.join('\\s') + '$');
	regex.regexHead = new RegExp('^' + partsHead.join('\\s') + '$')

	return regex;

};

Command.prototype.toString = function () {

	var parts = [this.name];

	this.args.forEach(function (arg) {

		parts.push(arg.toString());

	});

	return parts.join(' ');

};

Command.prototype.baseCommands = function () {

	var args = [];

	this.args.forEach(function (arg) {

		if (arg.optional === false && arg.nonValue === true) {
			args.push(arg.name);
		}

	});

	return args.join(' ');

};

Command.prototype.displayHelp = function () {

	var lArg = 0,
		lArgPadding = 6;

	// find the longest argument
	this.args.forEach(function (arg) {
		if (arg.name.length > lArg) {
			lArg = arg.name.length + 11;		// because the output contains (optional) or (required)
		}
	});

	help.log('');
	help.log('\tHelp for \'' + this.programLabel + ' ' + this.name + ((this.baseCommands().length === 0) ? '' : ' ' + this.baseCommands()) + '\'\n');

	if (this.description.length) {
		help.log('\t' + this.description + '\n');
	}

	help.log('\tUsage: ' + this.toString() + '\n');

	this.args.forEach(function (arg) {

		if (arg.nonValue === false) {

			help.log('\t       ' + pad(arg.name + ((arg.optional) ? ' (optional)' : ' (required)'), lArg+lArgPadding) + ((arg.description) ? arg.description : ''));

		}

	});

	help.log('');

};
